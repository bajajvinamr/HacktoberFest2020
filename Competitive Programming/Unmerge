#include <bits/stdc++.h>
using namespace std;
// #define int long long
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define pb push_back
#define ff first
#define mp make_pair
#define ss second
#define rep(i,a,b) for(int i=a;i<b;i++)
#define repp(i,a,b) for(int i=a;i<=b;i++)
#define endl '\n'
#define mod 1000000009
#define mod_in(a) bin(a, mod - 2)
#define fact(n) rep(i, 1, n+1) ft.pb((ft[i-1]*i)%mod)
#define ncr(n, r) (n>=r?((ft[n]*mod_in((ft[r]*ft[(n)-(r)])%mod))%mod):0LL)
#define pi 3.14159265358979323
#define INF 1e15
#define lb(v, a) lower_bound(v.begin(), v.end(), a)
#define ub(v, a) upper_bound(v.begin(), v.end(), a)

int po(int x, int n){
    int res=1;
    while(n>0){
        if(n&1)
            res=res*x;
        x*=x;
        n>>=1;
    }
    return res;
}

int bin(int x, int n){
    int res=1; x%=mod;
    while(n){
        if(n&1) res=(res*x)%mod;
        x=(x*x)%mod;
        n>>=1;
    }
    return res;
}

bool prime(int n){
    if(n==3)return 1;
    repp(i,2,sqrt(n)){
        if(n%i==0)return 0;
    }
    return 1;
}

bool isSubsetSum(int set[], int n, int sum){ 
    bool subset[n + 1][sum + 1]; 
    for (int i = 0; i <= n; i++) 
        subset[i][0] = true; 
    for (int i = 1; i <= sum; i++) 
        subset[0][i] = false; 
    for (int i = 1; i <= n; i++) { 
        for (int j = 1; j <= sum; j++) { 
            if (j < set[i - 1]) 
                subset[i][j] = subset[i - 1][j]; 
            if (j >= set[i - 1]) 
                subset[i][j] = subset[i - 1][j] 
                               || subset[i - 1][j - set[i - 1]]; 
        } 
    } 
    return subset[n][sum]; 
}  

void solve(){
    int n, par, mx; cin>>n;
    int arr[2*n];
    vector<int> v, xx;
    rep(i,0,2*n) cin>>arr[i];
    rep(i,0,2*n)v.pb(arr[i]);
    while(v.size()){
        mx = v[0];
        par = 0;
        rep(i,1,v.size()){
            if(arr[i] > mx){
                mx = arr[i];
                par = i;
            }
        }
        xx.pb(v.size()-par);
        for(int i=v.size()-1;i>=par;i--) v.pop_back();
    }
    int x[xx.size()];
    rep(i,0,xx.size()) x[i] = xx[i];
    cout<<((isSubsetSum(x, xx.size(), n))?"YES\n":"NO\n");
}

signed main(){
    fast
    // ft.pb(1);
    // fact(1000000);
    int t=1;
    cin>>t;
    while(t--) solve();
}
